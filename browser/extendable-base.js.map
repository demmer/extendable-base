{
  "version": 3,
  "sources": [
    "../grunt-dry/node_modules/grunt-browserify/node_modules/browserify/node_modules/browser-pack/_prelude.js",
    "index.js",
    "lib/base.js",
    "lib/extendable.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "module.exports = require('./lib/base');\n",
    "var Extendable = require('./extendable');\n\n/**\n * Generic base class for extending into subclasses.\n *\n * Enables natural inheritance expressions using `Base.extend`\n * that uses the Backbone extend syntax.\n *\n * The default constructor calls `initialize` on all subclasses\n * in the inheritance hierarchy, passing the same arguments to\n * each constructor.\n *\n */\nvar Base = Extendable.extend({\n    constructor: function() {\n        Base._init_all(Object.getPrototypeOf(this), this, arguments);\n    }\n}, {\n\n    // Helper function that walks the prototype chain calling initialize.\n    _init_all: function(proto, leaf, args) {\n        if (proto === null) {\n            return;\n        }\n        Base._init_all(Object.getPrototypeOf(proto), leaf, args);\n        if (proto.hasOwnProperty('initialize')) {\n            proto.initialize.apply(leaf, args);\n        }\n    },\n\n    // Sets up inheritance from the given parent class. If the constructor\n    // isn't supplied then a default constructor is added which calls\n    // `initialize` for each class in the inheritance hierarchy.\n    inherits: function(parent, protoProps, staticProps) {\n        if (!protoProps.hasOwnProperty('constructor')) {\n            protoProps.constructor = function() {\n                Base._init_all(Object.getPrototypeOf(this), this, arguments);\n            };\n        }\n        return Extendable.inherits(parent, protoProps, staticProps);\n    }\n});\n\n// Stash a reference to Extendable in the Base class itself so that the\n// module can simply export Base but still have access to Extendable via\n// Base.Extendable.\nBase.Extendable = Extendable;\n\nmodule.exports = Base;\n",
    "var _ = require('underscore');\n\n/**\n * Simple base class that pulls in the extend syntax from Backbone.\n */\nvar Extendable = function() { };\n\n// (Copy of Backbone.extend)\n// Set up the prototype chain, for subclasses.\n// Similar to `goog.inherits`, but uses a hash of prototype properties and\n// class properties to be extended.\nExtendable.extend = function(protoProps, staticProps) {\n    var parent = this;\n    var child;\n\n    // The constructor function for the new subclass is either defined by you\n    // (the \"constructor\" property in your `extend` definition), or defaulted\n    // by us to simply call the parent's constructor.\n    if (protoProps && _.has(protoProps, 'constructor')) {\n        child = protoProps.constructor;\n    } else {\n        child = function() { return parent.apply(this, arguments); };\n    }\n\n    // Add static properties to the constructor function, if supplied.\n    _.extend(child, parent, staticProps);\n\n    // Set the prototype chain to inherit from `parent`, without calling\n    // `parent`'s constructor function.\n    var Surrogate = function() { this.constructor = child; };\n    Surrogate.prototype = parent.prototype;\n    child.prototype = new Surrogate();\n\n    // Add prototype properties (instance properties) to the subclass,\n    // if supplied.\n    if (protoProps) { _.extend(child.prototype, protoProps); }\n\n    // Set a convenience property in case the parent's prototype is needed\n    // later.\n    child.__super__ = parent.prototype;\n\n    return child;\n};\n\n// Set up inheritance with a specific parent class.\nExtendable.inherits = function(parent, protoProps, staticProps) {\n    var child = Extendable.extend.call(parent, protoProps, staticProps);\n    child.extend = Extendable.extend;\n    return child;\n};\n\nmodule.exports = Extendable;\n"
  ]
}